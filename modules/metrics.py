import threading
import time

import plotext

from . import ssh


def display_metrics(results, metrics_results):
    plotext.theme("dark")
    plotext.plotsize(plotext.terminal_width(), 20)
    for os_name, result in results.items():
        if result == "succeeded":
            cpu_usage, ram_usage = metrics_results[os_name]

            # space between each os
            print("")
            plotext.clear_data()
            # for some reason this is considered data so we need to reset it after each data clear
            plotext.ylim(0, 100)
            plotext.plot(cpu_usage, label="CPU Usage")
            plotext.plot(ram_usage, label="RAM Usage")
            plotext.xlabel("Time (s)")
            plotext.ylabel("Usage (%)")
            plotext.title(f"Resource Usage on {os_name}")
            plotext.show()


class MetricsCollector:
    def __init__(self, client, interval=1, windows=False):
        self.client = client
        self.interval = interval
        self.windows = windows
        self.cpu_usage = []
        self.ram_usage = []
        self._stop_flag = False
        self._thread = None

    def start(self):
        self._stop_flag = False
        self._thread = threading.Thread(target=self._collect_metrics)
        self._thread.start()

    def _collect_metrics(self):
        while not self._stop_flag:
            cpu = self._get_cpu_sample()
            self.cpu_usage.append(cpu)
            ram = self._get_ram_sample()
            self.ram_usage.append(ram)
            time.sleep(self.interval)

    # generated by chatgpt
    def _get_cpu_sample(self):
        if self.windows:
            stdout, stderr = ssh.execute_ssh_command(
                self.client,
                "(Get-Counter '\\Processor(_Total)\\% Processor Time').CounterSamples.CookedValue",
                print_output=False,
            )
        else:
            stdout, stderr = ssh.execute_ssh_command(
                self.client, "top -bn1 | grep '%Cpu' | sed 's/.*, *\\([0-9.]*\\)%* id.*/\\1/' | awk '{print 100 - $1}'", print_output=False
            )
        return float(stdout)

    # generated by chatgpt
    def _get_ram_sample(self):
        if self.windows:
            stdout, stderr = ssh.execute_ssh_command(
                self.client,
                "(Get-Counter '\\Memory\\% Committed Bytes In Use').CounterSamples.CookedValue",
                print_output=False,
            )
        else:
            stdout, stderr = ssh.execute_ssh_command(self.client, "free | grep Mem | awk '{print $3/$2 * 100.0}'", print_output=False)
        return float(stdout)

    def get_results(self):
        self.stop()
        return self.cpu_usage, self.ram_usage

    def stop(self):
        self._stop_flag = True
        if self._thread is not None:
            self._thread.join()
